/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;



import Model.GraphEdge;
import Controller.GraphController;
import DAO.GraphDAO;
import Model.Graph;
import javax.swing.*;
import javax.swing.JOptionPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.*;
import java.util.List;
import java.util.Map;

import javax.swing.*;



public class Graphpage extends javax.swing.JFrame {

    private GraphController controller;
    public Graphpage(GraphController controller) {
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
        this.controller=controller;
        initComponents();
    
        //setButtonListeners();
    }
    
    public void setController(){
        this.controller=controller;
    }
    public void updateGraphView(Map<String, List<GraphEdge>> adjacencyList) {
    if (adjacencyList == null || adjacencyList.isEmpty()) return; // Prevent unnecessary updates

    SwingUtilities.invokeLater(() -> {
        StringBuilder result = new StringBuilder("Adjacency List:\n");
        for (Map.Entry<String, List<GraphEdge>> entry : adjacencyList.entrySet()) {
            result.append(entry.getKey()).append(" -> ");
            for (GraphEdge edge : entry.getValue()) {
                result.append("(").append(edge.getTarget())
                      .append(", Cost: ").append(edge.getCost())
                      .append(", Bandwidth: ").append(edge.getBandwidth())
                      .append(") ");
            }
            result.append("\n");
        }

        // Prevent infinite update loops by checking if text is actually different
        if (!graphTextArea.getText().equals(result.toString())) {
            graphTextArea.setText(result.toString());
        }
    });
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton7 = new javax.swing.JButton();
        analysisPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        NodeTextField = new javax.swing.JTextField();
        getNode = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        getEdgeNode1TextField = new javax.swing.JTextField();
        getEdgeNode2TextField = new javax.swing.JTextField();
        getEdge = new javax.swing.JButton();
        GraphVisualization = new javax.swing.JButton();
        FindShortestPath = new javax.swing.JButton();
        OptimizeNetwork = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        graphTextArea = new javax.swing.JTextArea();
        inputPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nodeField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        edgeNode1Field = new javax.swing.JTextField();
        edgeNode2Field = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        CostField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Bandwidth = new javax.swing.JTextField();
        addNode = new javax.swing.JButton();
        addEdge = new javax.swing.JButton();

        jButton7.setText("Optimize Network");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        analysisPanel.setBackground(new java.awt.Color(102, 255, 204));

        jLabel6.setText("get Node");

        NodeTextField.setText("jTextField6");

        getNode.setText("get Node");
        getNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getNodeActionPerformed(evt);
            }
        });

        jLabel7.setText("get Edge source");

        jLabel8.setText("get Edge Target");

        getEdgeNode1TextField.setText("jTextField7");

        getEdgeNode2TextField.setText("jTextField8");

        getEdge.setText("get Edge");
        getEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getEdgeActionPerformed(evt);
            }
        });

        GraphVisualization.setText("Graph Visualization");
        GraphVisualization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraphVisualizationActionPerformed(evt);
            }
        });

        FindShortestPath.setText("Find Shortest Path");
        FindShortestPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindShortestPathActionPerformed(evt);
            }
        });

        OptimizeNetwork.setText("Optimize Network");
        OptimizeNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptimizeNetworkActionPerformed(evt);
            }
        });

        graphTextArea.setColumns(20);
        graphTextArea.setRows(5);
        jScrollPane1.setViewportView(graphTextArea);

        javax.swing.GroupLayout analysisPanelLayout = new javax.swing.GroupLayout(analysisPanel);
        analysisPanel.setLayout(analysisPanelLayout);
        analysisPanelLayout.setHorizontalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisPanelLayout.createSequentialGroup()
                .addGroup(analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(analysisPanelLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(getEdge))
                    .addGroup(analysisPanelLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(analysisPanelLayout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(getEdgeNode2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(getEdgeNode1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(analysisPanelLayout.createSequentialGroup()
                                .addGroup(analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(getNode)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, analysisPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(2, 2, 2)))
                                .addGap(41, 41, 41)
                                .addComponent(NodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(156, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, analysisPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OptimizeNetwork)
                    .addComponent(FindShortestPath)
                    .addComponent(GraphVisualization))
                .addGap(52, 52, 52))
        );
        analysisPanelLayout.setVerticalGroup(
            analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, analysisPanelLayout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(OptimizeNetwork)
                .addGap(38, 38, 38)
                .addComponent(GraphVisualization)
                .addGap(18, 18, 18)
                .addComponent(FindShortestPath)
                .addGap(10, 10, 10)
                .addGroup(analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(NodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(getNode)
                .addGap(18, 18, 18)
                .addGroup(analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getEdgeNode1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(analysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(analysisPanelLayout.createSequentialGroup()
                        .addComponent(getEdgeNode2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, analysisPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(getEdge)
                .addContainerGap())
        );

        inputPanel.setBackground(new java.awt.Color(153, 255, 255));

        jLabel1.setText("node Name");

        jLabel2.setText("Edge source(Node ID)");

        jLabel3.setText("Edge Target(Node ID)");

        jLabel4.setText("Cost");

        jLabel5.setText("Bandwidth");

        addNode.setText("Add Node");
        addNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNodeActionPerformed(evt);
            }
        });

        addEdge.setText("Add Edge");
        addEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEdgeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(addNode)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(edgeNode2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(edgeNode1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CostField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Bandwidth, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(61, 61, 61))))
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel5))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(addEdge)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addNode)
                .addGap(18, 18, 18)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(edgeNode1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(edgeNode2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CostField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(21, 21, 21)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Bandwidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addEdge)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(analysisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analysisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void addNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNodeActionPerformed
        // TODO add your handling code here:
       
       
    addNode.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent evt) {
        String nodeName = nodeField.getText();
        if (!nodeName.isEmpty()) {
            controller.addNode(nodeName);
            nodeField.setText("");
            
            // Show success message
            JOptionPane.showMessageDialog(null, "Node " + nodeName + " added successfully!",
                    "Success", JOptionPane.INFORMATION_MESSAGE);

            // Update the graph view
            String adjacencyList = controller.getAdjacencyList();
            graphView.updateGraphView(adjacencyList);  // Update the graph view
        } else {
            JOptionPane.showMessageDialog(null, "Node name cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
});



    }//GEN-LAST:event_addNodeActionPerformed

    private void addEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEdgeActionPerformed
    
    addEdge.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent evt) {
        String source = edgeNode1Field.getText();
        String target = edgeNode2Field.getText();
        String costText = CostField.getText();
        String bandwidthText = Bandwidth.getText();

        // Check if all fields are filled
        if (!source.isEmpty() && !target.isEmpty() && !costText.isEmpty() && !bandwidthText.isEmpty()) {
            try {
                // Try to parse the cost and bandwidth as integers
                int cost = Integer.parseInt(costText);
                int bandwidth = Integer.parseInt(bandwidthText);
                
                // Add edge with valid inputs
                controller.addEdge(source, target, cost, bandwidth);
                
                // Clear the fields after successful operation
                edgeNode1Field.setText("");
                edgeNode2Field.setText("");
                CostField.setText("");
                Bandwidth.setText("");
                
                // Optionally, show success message
                JOptionPane.showMessageDialog(null, "Edge added successfully!", 
                        "Success", JOptionPane.INFORMATION_MESSAGE);

                // After adding the edge, update the adjacency list in the graph view
                String adjacencyList = controller.getAdjacencyList();
                graphView.updateGraphView(adjacencyList);  // Update the graph view
            } catch (NumberFormatException e) {
                // Handle invalid number input for cost and bandwidth
                JOptionPane.showMessageDialog(null, "Cost and Bandwidth must be valid integers.", 
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Show a message if any field is empty
            JOptionPane.showMessageDialog(null, "Both source and target nodes, cost, and bandwidth are required.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
});





        
                       
    }//GEN-LAST:event_addEdgeActionPerformed

    private void getNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getNodeActionPerformed
        // TODO add your handling code here:
        
        getNode.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent evt) {
        String node = NodeTextField.getText();
        if (!node.isEmpty()) {
            // Get the list of neighbors from the controller
            List<GraphEdge> neighbors = controller.getNeighbors(node);
            
            // Prepare the string to be displayed in graphTextArea
            if (neighbors != null && !neighbors.isEmpty()) {
                StringBuilder result = new StringBuilder("Neighbors of " + node + ":\n");
                for (GraphEdge edge : neighbors) {
                    result.append(edge.getTarget())
                          .append(", Cost: ").append(edge.getCost())
                          .append(", Bandwidth: ").append(edge.getBandwidth())
                          .append("\n");
                }
                // Set the text in the graphTextArea to show the connections
                graphTextArea.setText(result.toString());
            } else {
                // If there are no neighbors, show a message
                graphTextArea.setText("No neighbors found for " + node);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please enter a node name.", 
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
});


    }//GEN-LAST:event_getNodeActionPerformed

    private void getEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getEdgeActionPerformed
        // TODO add your handling code here:
        
    getEdge.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent evt) {
        String source = getEdgeNode1TextField.getText();
        String target = getEdgeNode2TextField.getText();

        if (!source.isEmpty() && !target.isEmpty()) {
            // Check if the edge exists between the source and target nodes
            boolean exists = controller.edgeExists(source, target);

            if (exists) {
                // If the edge exists, retrieve its details (cost and bandwidth)
                List<GraphEdge> neighbors = controller.getNeighbors(source);
                StringBuilder edgeDetails = new StringBuilder("Edge Details:\n");

                boolean edgeFound = false;
                for (GraphEdge edge : neighbors) {
                    if (edge.getTarget().equals(target)) {
                        edgeFound = true;
                        edgeDetails.append("Source: ").append(source)
                                   .append(" -> Target: ").append(target)
                                   .append(", Cost: ").append(edge.getCost())
                                   .append(", Bandwidth: ").append(edge.getBandwidth())
                                   .append("\n");
                        break;
                    }
                }

                // If the edge was found, show its details, otherwise, show a message
                if (edgeFound) {
                    graphTextArea.setText(edgeDetails.toString());
                } else {
                    graphTextArea.setText("Edge between " + source + " and " + target + " not found.");
                }
            } else {
                // If the edge doesn't exist, show a message
                graphTextArea.setText("Edge does not exist between " + source + " and " + target);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Both source and target nodes are required.", 
                                          "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
});

    }//GEN-LAST:event_getEdgeActionPerformed

    private void GraphVisualizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraphVisualizationActionPerformed
        // TODO add your handling code here:
    Graphvisualization.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent evt) {
        // Retrieve the adjacency list from the controller
        String adjacencyList = controller.getAdjacencyList();

        // Check if the adjacency list is not empty and then display it
        if (adjacencyList != null && !adjacencyList.isEmpty()) {
            // Set the adjacency list into the graphTextArea to display
            graphTextArea.setText(adjacencyList);
        } else {
            // In case the adjacency list is empty or null, display an informative message
            graphTextArea.setText("No nodes or edges available in the graph.");
        }
    }
});


    }//GEN-LAST:event_GraphVisualizationActionPerformed

    private void FindShortestPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindShortestPathActionPerformed
        // TODO add your handling code here:
    
        FindShortestPath.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent evt) {
        String source = getEdgeNode1TextField.getText();
        String target = getEdgeNode2TextField.getText();

        // Check if both source and target are provided
        if (!source.isEmpty() && !target.isEmpty()) {
            // Call the controller to find the shortest path
            String result = controller.findShortestPath(source, target);

            // Display the result in the graphTextArea
            graphTextArea.setText(result);
        } else {
            // Show an error message if either source or target is empty
            JOptionPane.showMessageDialog(null, "Both source and target nodes are required.", 
                                          "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
});


    }//GEN-LAST:event_FindShortestPathActionPerformed

    private void OptimizeNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptimizeNetworkActionPerformed
        // TODO add your handling code here:
        OptimizeNetwork.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent evt) {
            // Call the controller to optimize the network
            String optimizationResult = controller.optimizeNetwork();

            // Check if the result of the optimization is available
            if (optimizationResult != null && !optimizationResult.isEmpty()) {
                // Display the optimized network result in the graphTextArea
                graphTextArea.setText(optimizationResult);
            } else {
                // Show an error message if the optimization couldn't be performed
                JOptionPane.showMessageDialog(null, "Network optimization failed. Please check the graph.", 
                                              "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
    }//GEN-LAST:event_OptimizeNetworkActionPerformed

    
    
    
    private void disposePage() {
        this.dispose();
    }
    
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (Exception ex) {
        java.util.logging.Logger.getLogger(Graphpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    java.awt.EventQueue.invokeLater(new Runnable() {
        private Graphpage graphView;
    public void run() {
        // Create required dependencies
        GraphDAO graphDAO = new GraphDAO();
        Graph graph = new Graph();

        // Create GraphController and link it with the GraphPage
        GraphController graphController = new GraphController(graphView, graphDAO, graph);

        // Create GraphPage and pass the controller to the constructor
        Graphpage graphView = new Graphpage(graphController);

        
        // Initialize the controller to load the graph
        graphController.initialize();
    }
    });


    
    
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Bandwidth;
    private javax.swing.JTextField CostField;
    private javax.swing.JButton FindShortestPath;
    private javax.swing.JButton GraphVisualization;
    private javax.swing.JTextField NodeTextField;
    private javax.swing.JButton OptimizeNetwork;
    private javax.swing.JButton addEdge;
    private javax.swing.JButton addNode;
    private javax.swing.JPanel analysisPanel;
    private javax.swing.JTextField edgeNode1Field;
    private javax.swing.JTextField edgeNode2Field;
    private javax.swing.JButton getEdge;
    private javax.swing.JTextField getEdgeNode1TextField;
    private javax.swing.JTextField getEdgeNode2TextField;
    private javax.swing.JButton getNode;
    private javax.swing.JTextArea graphTextArea;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nodeField;
    // End of variables declaration//GEN-END:variables

    
    

    
    
}
